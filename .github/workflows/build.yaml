name: CI/CD

on: push

jobs:
  build:
    name: Build and Push to Harbor
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug Harbor secrets (optional, remove later)
        run: |
          echo "HARBOR_HOST is: '${{ secrets.HARBOR_HOST }}'"
          echo "Length of HARBOR_CA_CERT is: $(echo "${{ secrets.HARBOR_CA_CERT }}" | wc -c)"

      # ‚úÖ Install Harbor CA into system & Docker trust stores
      - name: Install Harbor CA certificate
        run: |
          echo "${{ secrets.HARBOR_CA_CERT }}" | sudo tee /usr/local/share/ca-certificates/harbor-ca.crt > /dev/null
          sudo update-ca-certificates

          CERT_DIR="/etc/docker/certs.d/${{ secrets.HARBOR_HOST }}:8443"
          sudo mkdir -p "$CERT_DIR"
          echo "${{ secrets.HARBOR_CA_CERT }}" | sudo tee "$CERT_DIR/ca.crt" > /dev/null

          echo "üîé Installed CA fingerprint:"
          openssl x509 -noout -fingerprint -sha256 -in "$CERT_DIR/ca.crt"

          sudo systemctl restart docker

      - name: Login to Harbor
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.HARBOR_HOST }}:8443
          username: ${{ secrets.HARBOR_ADMIN_USERNAME }}
          password: ${{ secrets.HARBOR_ADMIN_PASSWORD }}

      # ‚úÖ Build image locally with Buildx but do NOT push (avoids TLS bug)
      - name: Build image with Buildx (load into Docker)
        run: docker buildx build --load -t ${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest .

      # ‚úÖ Push the image using classic Docker (respects CA trust)
      - name: Push image to Harbor
        run: docker push ${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest

  #scan:
    #name: Scan Image with Trivy
    #needs: [build]
    #runs-on: ubuntu-latest
    #steps:
     # - name: Install Trivy (from GitHub release)
      #  run: |
       #   LATEST_URL=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest \
        #    | grep "browser_download_url" \
         #   | grep "Linux-64bit.tar.gz" \
          #  | cut -d '"' -f 4)

          #echo "üì¶ Downloading Trivy from: $LATEST_URL"
          #wget -qO trivy.tar.gz "$LATEST_URL"
          #tar zxvf trivy.tar.gz
          #sudo mv trivy /usr/local/bin/
          #trivy --version

      # ‚úÖ Scan the image directly from Harbor
      #- name: Scan image with Trivy
       # run: |
        #  echo "üõ°Ô∏è Scanning ${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest"
         # trivy image --severity CRITICAL,HIGH --ignore-unfixed --insecure \
          #${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest

      # (Optional) Save scan results as an artifact
      #- name: Save scan report
       # run: |
        #  trivy image --severity CRITICAL,HIGH --ignore-unfixed --insecure -f json -o trivy-report.json \
         # ${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest

      #- name: Upload scan report
       # uses: actions/upload-artifact@v4
        #with:
         # name: trivy-report
          #path: trivy-report.json

  test:
    name: Test Image
    needs: [scan]
    runs-on: ubuntu-latest
    steps:
      - name: Run container from Harbor image
        run: |
          docker run -d -p 80:5000 ${{ secrets.HARBOR_HOST }}:8443/library/student-app:latest
          sleep 10
          curl -f http://localhost
          docker ps -aq | xargs docker stop | xargs docker rm

  deploy:
    name: Deploy to Kubernetes
    needs: [test]
    runs-on: self-hosted
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Apply Kubernetes manifests
        run: |
          sudo kubectl delete deployment --all
          sudo kubectl apply -f ${{ github.workspace }}/kubernetes/deployment.yaml --force
          sudo kubectl apply -f ${{ github.workspace }}/kubernetes/nginx-service.yaml --force

  postman:
    name: API Tests
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_KEY }}
      - name: Run API tests
        run: |
          postman collection run "${{ github.workspace }}/postman/collections/Integration Testing.json" --integration-id "181153-${{ github.run_id }}"
